// Numerical Runge Kutta Solvers

#ifndef SOLVERS_H
#define SOLVERS_H

#define VEC_SIZE 6 // dimension of vector (kept static at 6 for orbit prop)
#define RK89_STAGES 16
#include <stdlib.h>
#include <math.h>
#include <stdio.h>

typedef struct AdaptiveSolution
{
    double *t;             // timesteps
    double (*y)[VEC_SIZE]; // function value
    int n;                 // number of steps taken
} solution;

solution *rk89(void (*f)(double, double[VEC_SIZE], double[VEC_SIZE]), double t0, double tf, double y0[VEC_SIZE], double h0, double tol)
{
    // Nodes
    const double rk89_c[] = {
        0.00000000000000000000,
        0.03461999999999999800,
        0.09702435063878044053,
        0.14553652595817068160,
        0.56100000000000005418,
        0.22900791159048500267,
        0.54499208840951496313,
        0.64500000000000001776,
        0.48375000000000001332,
        0.06757000000000000506,
        0.25000000000000000000,
        0.65906506187309987777,
        0.82059999999999999609,
        0.90120000000000000107,
        1.00000000000000000000,
        1.00000000000000000000,
    };

    // Weights - 9th order
    const double rk89_b[] = {
        0.01461197685842315248,
        0.00000000000000000000,
        0.00000000000000000000,
        0.00000000000000000000,
        0.00000000000000000000,
        0.00000000000000000000,
        0.00000000000000000000,
        -0.39152118623313392209,
        0.23109325002895064749,
        0.12747667699928524887,
        0.22464341762041578621,
        0.56843526897485130434,
        0.05825871557215827473,
        0.13643174034822155849,
        0.03057013983082797551,
        0.00000000000000000000,
    };

    // Weights - 8th order
    const double rk89_bh[] = {
        0.01996996514886772989,
        0.00000000000000000000,
        0.00000000000000000000,
        0.00000000000000000000,
        0.00000000000000000000,
        0.00000000000000000000,
        0.00000000000000000000,
        2.19149930494933009584,
        0.08857071848208437903,
        0.11405602348659656109,
        0.25331638053451072112,
        -2.05656438624094084489,
        0.34080967990131200152,
        0.00000000000000000000,
        0.00000000000000000000,
        0.04834231373823958539,
    };

    // Coupling coefficients
    const double rk89_a[16][16] = {
        {
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            0.03461999999999999800,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            -0.03893354388572873442,
            0.13595789452450918189,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            0.03638413148954267040,
            0.00000000000000000000,
            0.10915239446862799733,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            2.02576391439396985561,
            0.00000000000000000000,
            -7.63802383649629224038,
            6.17325992210232232793,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            0.05112275589406060916,
            0.00000000000000000000,
            0.00000000000000000000,
            0.17708237945550214798,
            0.00080277624092225019,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            0.13160063579752162566,
            0.00000000000000000000,
            0.00000000000000000000,
            -0.29572762526696366736,
            0.08781378035642951885,
            0.62130529752252749986,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            0.07166666666666667018,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.33055335789153195147,
            0.24277997544180138223,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            0.07180664062500000111,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.32943802832281771087,
            0.11651900292718228580,
            -0.03401367187499999833,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            0.04836757646340646838,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.03928989925676164285,
            0.10547409458903446444,
            -0.02143865284648312566,
            -0.10412291746271944148,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            -0.02664561487201478479,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.03333333333333333287,
            -0.16310722448724671030,
            0.03396081684127761485,
            0.15723194138146259768,
            0.21522674780318795662,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            0.03689009248708622485,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            -0.14651815767255430001,
            0.22425777681720243661,
            0.02294405717066072548,
            -0.00358500529057287614,
            0.08669223316444385485,
            0.43838406519683376095,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            -0.48660122151133405888,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            -6.30460265028285338218,
            -0.28124561828947258757,
            -2.67901923621984927593,
            0.51881566392415756628,
            1.36535318760334178911,
            5.88509108850394646595,
            2.80280878627206275766,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            0.41853674577534716317,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            6.72454758190645929261,
            -0.42544428016461177666,
            3.34327915300126576881,
            0.61708166311753775979,
            -0.92996612393993283163,
            -6.09994880475101108885,
            -3.00220618788939885846,
            0.25532025294434457230,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            -0.77937408612288461285,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            -13.93734253810777623528,
            1.25204885337935722944,
            -14.69150040801686962766,
            -0.49470505853314167277,
            2.24297490914623676161,
            13.36789380382864322883,
            14.39665048665068702860,
            -0.79758133317767998527,
            0.44093537095342777432,
            0.00000000000000000000,
            0.00000000000000000000,
        },
        {
            2.05805133746688628804,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
            22.35793772796803224878,
            0.90949810997556335135,
            35.89110098240264079550,
            -3.44251502762445360517,
            -4.86548135803636849772,
            -18.90980381354342654276,
            -34.26354448030451749219,
            1.26475652169564267702,
            0.00000000000000000000,
            0.00000000000000000000,
            0.00000000000000000000,
        }};

    if (tf <= t0)
        return NULL; // error case

    ////// Initial estimate for n = number of rows in solution
    int n = (int)((tf - t0) / h0); // 1 step every 10 seconds
    int step = 0;

    ////// Allocate result struct
    solution *result = (solution *)malloc(sizeof(solution));
    result->y = (double(*)[6])malloc(n * sizeof(double[VEC_SIZE]));
    result->t = (double(*))malloc(n * sizeof(double));

    ////// Prepare Step variables
    double h = h0; // initial stepsize
    double h_old;  // previous step variable
    double t = t0; // intial time

    // Init y0, t0 (step 0)
    for (int j = 0; j < VEC_SIZE; j++)
        result->y[0][j] = y0[j];
    result->t[0] = t;

    // Create Step Variables
    double k[RK89_STAGES][VEC_SIZE]; // k values
    double y_i[VEC_SIZE];            // function inputs at each step
    double y_curr[VEC_SIZE];         // current solution array, and also used to update itself for next step

    double err; // magnitude of error

    // zero-out k
    for (int i = 0; i < RK89_STAGES; i++)
        for (int j = 0; j < VEC_SIZE; j++)
            k[i][j] = 0;

    /////// INTEGRATION STEPS
    while (t - h <= tf)
    {
        for (int j = 0; j < VEC_SIZE; j++)
            y_curr[j] = result->y[step][j]; // get current y (for vectorization purposes)

        f(t, y_curr, k[0]); // RK Stage 0

        // Perform all RK Stages [1, s)
        for (int r = 1; r < RK89_STAGES; r++)
        {
            //// Prepare input vector
            for (int j = 0; j < VEC_SIZE; j++)
            {
                y_i[j] = y_curr[j]; // take current sol
                for (int w = 0; w < r; w++)
                    y_i[j] += h * k[w][j] * rk89_a[r][w]; // Add previous steps
            }
            f(t + h * rk89_c[r], y_i, k[r]); // evaluate next k
        }

        // Calculate error

        err = 0;
        for (int i = 0; i < RK89_STAGES; i++)
        {
            // use b and b_h weights to calculate error

            for (int j = 0; j < VEC_SIZE; j++)
            {
                err += pow(h * (rk89_b[i] - rk89_bh[i]) * k[i][j], 2);
            }
        }
        err = sqrt(err) / VEC_SIZE;
        printf("err: %f\n", err);

        //// Step size adjustment
        // Determine new step size
        h_old = h;
        h = 0.9 * h * pow(tol / err, 1.0 / 9.0); // next step size (based on ninth order local error)

        if (err < tol)
        {
            /// step within tolerance, append solution
            // check array size and increase size if needed
            if ((step + 1) >= n)
            {
                n *= 2; // double size of array and reallocate memory
                result->y = (double(*)[VEC_SIZE])realloc(result->y, n * sizeof(double[VEC_SIZE]));
                result->t = (double(*))realloc(result->t, n * sizeof(double));
            }

            // Append to result
            for (int j = 0; j < VEC_SIZE; j++)
            {
                for (int r = 0; r < RK89_STAGES; r++)
                    y_curr[j] += h_old * rk89_b[r] * k[r][j]; // Add all weights
            }
            for (int j = 0; j < VEC_SIZE; j++)
                result->y[step + 1][j] = y_curr[j]; // write (separated for vectorization)

            step++;              // advance step
            t += h_old;          // advance time
            result->t[step] = t; // record time

            // adjust timestep if needed to hit tf
            if (t + h > tf)
                h = tf - t;
        }
        // Otherwise, retry step
        // printf("t: %f, h: %f, err: %f\n", t, h, err);
    }
    // record # of steps after finish
    result->n = step;

    return result;
}

#endif